// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"data_proxy/internal/biz"
	"data_proxy/internal/conf"
	"data_proxy/internal/data"
	"data_proxy/internal/server"
	"data_proxy/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	v := data.NewRedis(confData)
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(confData, logger, v, db)
	if err != nil {
		return nil, nil, err
	}
	commonRepo := data.NewGreeterRepo(dataData, logger)
	commonServicecase := biz.NewCommonServicecase(commonRepo, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	cardRepo := data.NewCardRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	userUsecase := biz.NewUserUsecase(userRepo, cardRepo, transaction, logger)
	commonService := service.NewCommonService(logger, commonServicecase, userUsecase)
	grpcServer := server.NewGRPCServer(confServer, commonService, logger)
	httpServer := server.NewHTTPServer(confServer, logger, grpcServer)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
